--
-- PostgreSQL database dump
--

-- Dumped from database version 15.13 (Debian 15.13-1.pgdg120+1)
-- Dumped by pg_dump version 15.13 (Debian 15.13-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

ALTER TABLE IF EXISTS ONLY orders.order_items DROP CONSTRAINT IF EXISTS fk_order_items_order_id;
ALTER TABLE IF EXISTS ONLY auth."Users" DROP CONSTRAINT IF EXISTS "FK_Users_Roles_RoleId";
DROP INDEX IF EXISTS orders.idx_orders_status;
DROP INDEX IF EXISTS orders.idx_orders_order_number;
DROP INDEX IF EXISTS orders.idx_orders_customer_email;
DROP INDEX IF EXISTS orders.idx_orders_created_at;
DROP INDEX IF EXISTS orders.idx_order_items_product_id;
DROP INDEX IF EXISTS orders.idx_order_items_order_id;
DROP INDEX IF EXISTS notifications.idx_device_tokens_user_role;
DROP INDEX IF EXISTS notifications.idx_device_tokens_user_id;
DROP INDEX IF EXISTS notifications.idx_device_tokens_token;
DROP INDEX IF EXISTS notifications.idx_device_tokens_last_used;
DROP INDEX IF EXISTS notifications.idx_device_tokens_is_active;
DROP INDEX IF EXISTS auth."IX_Users_RoleId";
ALTER TABLE IF EXISTS ONLY orders.orders DROP CONSTRAINT IF EXISTS "PK_orders";
ALTER TABLE IF EXISTS ONLY orders.order_items DROP CONSTRAINT IF EXISTS "PK_order_items";
ALTER TABLE IF EXISTS ONLY orders."__EFMigrationsHistory" DROP CONSTRAINT IF EXISTS "PK___EFMigrationsHistory";
ALTER TABLE IF EXISTS ONLY orders."EFMigrationsHistory" DROP CONSTRAINT IF EXISTS "PK_EFMigrationsHistory";
ALTER TABLE IF EXISTS ONLY notifications.device_tokens DROP CONSTRAINT IF EXISTS "PK_device_tokens";
ALTER TABLE IF EXISTS ONLY notifications."__EFMigrationsHistory" DROP CONSTRAINT IF EXISTS "PK___EFMigrationsHistory";
ALTER TABLE IF EXISTS ONLY notifications."EFMigrationsHistory" DROP CONSTRAINT IF EXISTS "PK_EFMigrationsHistory";
ALTER TABLE IF EXISTS ONLY auth."__EFMigrationsHistory" DROP CONSTRAINT IF EXISTS "PK___EFMigrationsHistory";
ALTER TABLE IF EXISTS ONLY auth."Users" DROP CONSTRAINT IF EXISTS "PK_Users";
ALTER TABLE IF EXISTS ONLY auth."Roles" DROP CONSTRAINT IF EXISTS "PK_Roles";
ALTER TABLE IF EXISTS ONLY auth."EFMigrationsHistory" DROP CONSTRAINT IF EXISTS "PK_EFMigrationsHistory";
DROP TABLE IF EXISTS orders.orders;
DROP TABLE IF EXISTS orders.order_items;
DROP TABLE IF EXISTS orders."__EFMigrationsHistory";
DROP TABLE IF EXISTS orders."EFMigrationsHistory";
DROP TABLE IF EXISTS notifications.device_tokens;
DROP TABLE IF EXISTS notifications."__EFMigrationsHistory";
DROP TABLE IF EXISTS notifications."EFMigrationsHistory";
DROP TABLE IF EXISTS auth."__EFMigrationsHistory";
DROP TABLE IF EXISTS auth."Users";
DROP TABLE IF EXISTS auth."Roles";
DROP TABLE IF EXISTS auth."EFMigrationsHistory";
DROP SCHEMA IF EXISTS orders;
DROP SCHEMA IF EXISTS notifications;
DROP SCHEMA IF EXISTS auth;
--
-- Name: auth; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO postgres;

--
-- Name: notifications; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA notifications;


ALTER SCHEMA notifications OWNER TO postgres;

--
-- Name: orders; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA orders;


ALTER SCHEMA orders OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: EFMigrationsHistory; Type: TABLE; Schema: auth; Owner: postgres
--

CREATE TABLE auth."EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL
);


ALTER TABLE auth."EFMigrationsHistory" OWNER TO postgres;

--
-- Name: Roles; Type: TABLE; Schema: auth; Owner: postgres
--

CREATE TABLE auth."Roles" (
    "Id" integer NOT NULL,
    "Name" text NOT NULL,
    "Description" text NOT NULL
);


ALTER TABLE auth."Roles" OWNER TO postgres;

--
-- Name: Roles_Id_seq; Type: SEQUENCE; Schema: auth; Owner: postgres
--

ALTER TABLE auth."Roles" ALTER COLUMN "Id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME auth."Roles_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Users; Type: TABLE; Schema: auth; Owner: postgres
--

CREATE TABLE auth."Users" (
    "Id" integer NOT NULL,
    "Name" text NOT NULL,
    "Email" text NOT NULL,
    "PasswordHash" text NOT NULL,
    "RoleId" integer NOT NULL
);


ALTER TABLE auth."Users" OWNER TO postgres;

--
-- Name: Users_Id_seq; Type: SEQUENCE; Schema: auth; Owner: postgres
--

ALTER TABLE auth."Users" ALTER COLUMN "Id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME auth."Users_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: __EFMigrationsHistory; Type: TABLE; Schema: auth; Owner: postgres
--

CREATE TABLE auth."__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL
);


ALTER TABLE auth."__EFMigrationsHistory" OWNER TO postgres;

--
-- Name: EFMigrationsHistory; Type: TABLE; Schema: notifications; Owner: postgres
--

CREATE TABLE notifications."EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL
);


ALTER TABLE notifications."EFMigrationsHistory" OWNER TO postgres;

--
-- Name: __EFMigrationsHistory; Type: TABLE; Schema: notifications; Owner: postgres
--

CREATE TABLE notifications."__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL
);


ALTER TABLE notifications."__EFMigrationsHistory" OWNER TO postgres;

--
-- Name: device_tokens; Type: TABLE; Schema: notifications; Owner: postgres
--

CREATE TABLE notifications.device_tokens (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id character varying(50) NOT NULL,
    token character varying(500) NOT NULL,
    user_role integer NOT NULL,
    device_id character varying(100),
    platform character varying(20),
    app_version character varying(20),
    created_at timestamp with time zone NOT NULL,
    last_used timestamp with time zone NOT NULL,
    is_active boolean DEFAULT true NOT NULL
);


ALTER TABLE notifications.device_tokens OWNER TO postgres;

--
-- Name: EFMigrationsHistory; Type: TABLE; Schema: orders; Owner: postgres
--

CREATE TABLE orders."EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL
);


ALTER TABLE orders."EFMigrationsHistory" OWNER TO postgres;

--
-- Name: __EFMigrationsHistory; Type: TABLE; Schema: orders; Owner: postgres
--

CREATE TABLE orders."__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL
);


ALTER TABLE orders."__EFMigrationsHistory" OWNER TO postgres;

--
-- Name: order_items; Type: TABLE; Schema: orders; Owner: postgres
--

CREATE TABLE orders.order_items (
    id uuid NOT NULL,
    order_id uuid NOT NULL,
    product_name character varying(200) NOT NULL,
    product_id text NOT NULL,
    quantity integer NOT NULL
);


ALTER TABLE orders.order_items OWNER TO postgres;

--
-- Name: orders; Type: TABLE; Schema: orders; Owner: postgres
--

CREATE TABLE orders.orders (
    id uuid NOT NULL,
    order_number character varying(50) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone,
    status integer NOT NULL,
    customer_name character varying(200) NOT NULL,
    customer_email character varying(200) NOT NULL,
    address character varying(500) NOT NULL,
    phone character varying(50) NOT NULL,
    "DeliveryUserId" integer,
    "DeliveryUserEmail" text
);


ALTER TABLE orders.orders OWNER TO postgres;

--
-- Data for Name: EFMigrationsHistory; Type: TABLE DATA; Schema: auth; Owner: postgres
--

COPY auth."EFMigrationsHistory" ("MigrationId", "ProductVersion") FROM stdin;
\.


--
-- Data for Name: Roles; Type: TABLE DATA; Schema: auth; Owner: postgres
--

COPY auth."Roles" ("Id", "Name", "Description") FROM stdin;
1	warehouse_operator	Operario de deposito
2	delivery	Delivery
\.


--
-- Data for Name: Users; Type: TABLE DATA; Schema: auth; Owner: postgres
--

COPY auth."Users" ("Id", "Name", "Email", "PasswordHash", "RoleId") FROM stdin;
1	warehouse	warehouse@example.com	AQAAAAIAAYagAAAAEDOywcuvKdYsRUL4lwWBfImvm+1ewDi+Gc9xbg4qiTux5D9dhZroJCx8QXfeUQs0Ww==	1
2	delivery	delivery@example.com	AQAAAAIAAYagAAAAEHIdCYnfth+g/4VRHePBYsp66ipcZVNa3MGwCJTOaj/xEEt0GIgyE+eHOO/mZrzVrg==	2
\.


--
-- Data for Name: __EFMigrationsHistory; Type: TABLE DATA; Schema: auth; Owner: postgres
--

COPY auth."__EFMigrationsHistory" ("MigrationId", "ProductVersion") FROM stdin;
20250612022919_InitialCreate	8.0.11
\.


--
-- Data for Name: EFMigrationsHistory; Type: TABLE DATA; Schema: notifications; Owner: postgres
--

COPY notifications."EFMigrationsHistory" ("MigrationId", "ProductVersion") FROM stdin;
\.


--
-- Data for Name: __EFMigrationsHistory; Type: TABLE DATA; Schema: notifications; Owner: postgres
--

COPY notifications."__EFMigrationsHistory" ("MigrationId", "ProductVersion") FROM stdin;
20250612022939_InitialCreate	8.0.11
\.


--
-- Data for Name: device_tokens; Type: TABLE DATA; Schema: notifications; Owner: postgres
--

COPY notifications.device_tokens (id, user_id, token, user_role, device_id, platform, app_version, created_at, last_used, is_active) FROM stdin;
bbb5e4ca-53b0-4f3d-b56d-aa97f95bb766	1	eMfilBNTRLieOl4wkyRiVH:APA91bGTZOr8Yh4K31nUnuv8o_b8m-FwAfNOpyQjTt6QHjFKxJkUVhd2WUjefFft8fdBfhm7dyJ4uR8sPPHYNNOdatyMZpYi_C_P2aC2txq-Fmxfu-lBKms	1	\N	\N	\N	2025-06-12 02:32:18.904183+00	2025-06-12 02:32:18.905462+00	t
\.


--
-- Data for Name: EFMigrationsHistory; Type: TABLE DATA; Schema: orders; Owner: postgres
--

COPY orders."EFMigrationsHistory" ("MigrationId", "ProductVersion") FROM stdin;
\.


--
-- Data for Name: __EFMigrationsHistory; Type: TABLE DATA; Schema: orders; Owner: postgres
--

COPY orders."__EFMigrationsHistory" ("MigrationId", "ProductVersion") FROM stdin;
20250612022907_InitialCreate	8.0.11
\.


--
-- Data for Name: order_items; Type: TABLE DATA; Schema: orders; Owner: postgres
--

COPY orders.order_items (id, order_id, product_name, product_id, quantity) FROM stdin;
1a0e349e-7a54-49fd-898a-2730a4f5130e	e40009cb-740f-42c8-a0a7-4795b0347531	Tablet Samsung Galaxy Tab A8	PROD-010	1
9a11b1db-7de3-4464-9b32-6211c37674cd	e40009cb-740f-42c8-a0a7-4795b0347531	Auriculares Bluetooth JBL	PROD-004	1
44f563c3-9838-4ecc-97f3-f3b7df1df514	abfd3781-2b5e-4a24-88a5-1b10892a31d1	Resma de hojas A4	PROD-003	5
4e7670c8-d1af-4a6c-b69d-1145067e3619	abfd3781-2b5e-4a24-88a5-1b10892a31d1	Impresora HP LaserJet	PROD-007	1
ae258466-8041-4ee2-af1b-65c7ba33ce95	abfd3781-2b5e-4a24-88a5-1b10892a31d1	Cartucho de tinta negra HP	PROD-011	2
385a0713-43ad-4d90-8210-a3113cd3b1af	d69a4672-d68b-4d62-abab-f361ecf7bb5a	Teclado mecánico Redragon	PROD-008	1
4fb08359-bc9e-4ae6-b313-758c0ed6f5ac	d69a4672-d68b-4d62-abab-f361ecf7bb5a	Cable HDMI 2.0 de 2m	PROD-009	2
75845042-5c7f-48d0-8aba-1fc5383208c2	d69a4672-d68b-4d62-abab-f361ecf7bb5a	Monitor LG 24'' Full HD	PROD-015	1
\.


--
-- Data for Name: orders; Type: TABLE DATA; Schema: orders; Owner: postgres
--

COPY orders.orders (id, order_number, created_at, updated_at, status, customer_name, customer_email, address, phone, "DeliveryUserId", "DeliveryUserEmail") FROM stdin;
e40009cb-740f-42c8-a0a7-4795b0347531	ORD-20250611-007	2025-06-12 02:32:24.368197+00	2025-06-12 02:33:39.824327+00	3	Carla Rodríguez	carla.rodriguez@email.com	Calle Rivadavia 4567, Mar del Plata, Buenos Aires	+54 223 123-4567	2	delivery@example.com
abfd3781-2b5e-4a24-88a5-1b10892a31d1	ORD-20250611-009	2025-06-12 02:33:58.047886+00	2025-06-12 02:33:58.044294+00	1	Lucas Martínez	lucas.martinez@email.com	San Martín 789, Balcarce, Buenos Aires	+54 2266 654-321	\N	\N
d69a4672-d68b-4d62-abab-f361ecf7bb5a	ORD-20250611-010	2025-06-12 02:34:25.604385+00	2025-06-12 02:34:45.789086+00	2	Mariana Álvarez	mariana.alvarez@email.com	Boulevard Marítimo 1520, Mar del Plata, Buenos Aires	+54 223 789-4561	\N	\N
\.


--
-- Name: Roles_Id_seq; Type: SEQUENCE SET; Schema: auth; Owner: postgres
--

SELECT pg_catalog.setval('auth."Roles_Id_seq"', 3, false);


--
-- Name: Users_Id_seq; Type: SEQUENCE SET; Schema: auth; Owner: postgres
--

SELECT pg_catalog.setval('auth."Users_Id_seq"', 2, true);


--
-- Name: EFMigrationsHistory PK_EFMigrationsHistory; Type: CONSTRAINT; Schema: auth; Owner: postgres
--

ALTER TABLE ONLY auth."EFMigrationsHistory"
    ADD CONSTRAINT "PK_EFMigrationsHistory" PRIMARY KEY ("MigrationId");


--
-- Name: Roles PK_Roles; Type: CONSTRAINT; Schema: auth; Owner: postgres
--

ALTER TABLE ONLY auth."Roles"
    ADD CONSTRAINT "PK_Roles" PRIMARY KEY ("Id");


--
-- Name: Users PK_Users; Type: CONSTRAINT; Schema: auth; Owner: postgres
--

ALTER TABLE ONLY auth."Users"
    ADD CONSTRAINT "PK_Users" PRIMARY KEY ("Id");


--
-- Name: __EFMigrationsHistory PK___EFMigrationsHistory; Type: CONSTRAINT; Schema: auth; Owner: postgres
--

ALTER TABLE ONLY auth."__EFMigrationsHistory"
    ADD CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId");


--
-- Name: EFMigrationsHistory PK_EFMigrationsHistory; Type: CONSTRAINT; Schema: notifications; Owner: postgres
--

ALTER TABLE ONLY notifications."EFMigrationsHistory"
    ADD CONSTRAINT "PK_EFMigrationsHistory" PRIMARY KEY ("MigrationId");


--
-- Name: __EFMigrationsHistory PK___EFMigrationsHistory; Type: CONSTRAINT; Schema: notifications; Owner: postgres
--

ALTER TABLE ONLY notifications."__EFMigrationsHistory"
    ADD CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId");


--
-- Name: device_tokens PK_device_tokens; Type: CONSTRAINT; Schema: notifications; Owner: postgres
--

ALTER TABLE ONLY notifications.device_tokens
    ADD CONSTRAINT "PK_device_tokens" PRIMARY KEY (id);


--
-- Name: EFMigrationsHistory PK_EFMigrationsHistory; Type: CONSTRAINT; Schema: orders; Owner: postgres
--

ALTER TABLE ONLY orders."EFMigrationsHistory"
    ADD CONSTRAINT "PK_EFMigrationsHistory" PRIMARY KEY ("MigrationId");


--
-- Name: __EFMigrationsHistory PK___EFMigrationsHistory; Type: CONSTRAINT; Schema: orders; Owner: postgres
--

ALTER TABLE ONLY orders."__EFMigrationsHistory"
    ADD CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId");


--
-- Name: order_items PK_order_items; Type: CONSTRAINT; Schema: orders; Owner: postgres
--

ALTER TABLE ONLY orders.order_items
    ADD CONSTRAINT "PK_order_items" PRIMARY KEY (id);


--
-- Name: orders PK_orders; Type: CONSTRAINT; Schema: orders; Owner: postgres
--

ALTER TABLE ONLY orders.orders
    ADD CONSTRAINT "PK_orders" PRIMARY KEY (id);


--
-- Name: IX_Users_RoleId; Type: INDEX; Schema: auth; Owner: postgres
--

CREATE INDEX "IX_Users_RoleId" ON auth."Users" USING btree ("RoleId");


--
-- Name: idx_device_tokens_is_active; Type: INDEX; Schema: notifications; Owner: postgres
--

CREATE INDEX idx_device_tokens_is_active ON notifications.device_tokens USING btree (is_active);


--
-- Name: idx_device_tokens_last_used; Type: INDEX; Schema: notifications; Owner: postgres
--

CREATE INDEX idx_device_tokens_last_used ON notifications.device_tokens USING btree (last_used);


--
-- Name: idx_device_tokens_token; Type: INDEX; Schema: notifications; Owner: postgres
--

CREATE UNIQUE INDEX idx_device_tokens_token ON notifications.device_tokens USING btree (token);


--
-- Name: idx_device_tokens_user_id; Type: INDEX; Schema: notifications; Owner: postgres
--

CREATE INDEX idx_device_tokens_user_id ON notifications.device_tokens USING btree (user_id);


--
-- Name: idx_device_tokens_user_role; Type: INDEX; Schema: notifications; Owner: postgres
--

CREATE INDEX idx_device_tokens_user_role ON notifications.device_tokens USING btree (user_role);


--
-- Name: idx_order_items_order_id; Type: INDEX; Schema: orders; Owner: postgres
--

CREATE INDEX idx_order_items_order_id ON orders.order_items USING btree (order_id);


--
-- Name: idx_order_items_product_id; Type: INDEX; Schema: orders; Owner: postgres
--

CREATE INDEX idx_order_items_product_id ON orders.order_items USING btree (product_id);


--
-- Name: idx_orders_created_at; Type: INDEX; Schema: orders; Owner: postgres
--

CREATE INDEX idx_orders_created_at ON orders.orders USING btree (created_at);


--
-- Name: idx_orders_customer_email; Type: INDEX; Schema: orders; Owner: postgres
--

CREATE INDEX idx_orders_customer_email ON orders.orders USING btree (customer_email);


--
-- Name: idx_orders_order_number; Type: INDEX; Schema: orders; Owner: postgres
--

CREATE UNIQUE INDEX idx_orders_order_number ON orders.orders USING btree (order_number);


--
-- Name: idx_orders_status; Type: INDEX; Schema: orders; Owner: postgres
--

CREATE INDEX idx_orders_status ON orders.orders USING btree (status);


--
-- Name: Users FK_Users_Roles_RoleId; Type: FK CONSTRAINT; Schema: auth; Owner: postgres
--

ALTER TABLE ONLY auth."Users"
    ADD CONSTRAINT "FK_Users_Roles_RoleId" FOREIGN KEY ("RoleId") REFERENCES auth."Roles"("Id") ON DELETE CASCADE;


--
-- Name: order_items fk_order_items_order_id; Type: FK CONSTRAINT; Schema: orders; Owner: postgres
--

ALTER TABLE ONLY orders.order_items
    ADD CONSTRAINT fk_order_items_order_id FOREIGN KEY (order_id) REFERENCES orders.orders(id) ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

